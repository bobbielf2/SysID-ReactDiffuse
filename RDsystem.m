function qoi = RDsystem(theta,t,x,u0)
% a reaction-diffusion system
% Input:
%   theta   - system parameters
%   u0      - (optional) provide fixed initial condition
% Output: 
%   qoi     - quantities of interest generated by the system
%   qoi(:,i) = QoI for the i-th snapshot
%   qoi(1,:) = mean of local mins of the field
%   qoi(2,:) = mean of local maxs of the field
%   qoi(3,:) = mean of bump-size distribution
%   qoi(4,:) = std of bump-size distribution

% ------ set up time, space, initial condition ---------------------------
if nargin < 2
    T = 15; n = 20;  t = linspace(0,T,n+1);      % time domain = [0,T]
    L = 40; m = 400; x = linspace(-L,L,m+1);     % space domain = [-L,L]
end
if nargin < 4, u0 = []; end

% ------ Reaction-diffusion equation solver ------------------------------
theta(1:2) = exp(theta(1:2)); % exponentiate to retrieve diffusivities
[sol, tsol, x, ~, sole, te, ie] = reactdiffuse1d2sp(t,x,u0,theta);

% ------ Compute QoI's from solution -------------------------------------
% assemble solution samples
if isempty(ie)
%    samps = [sol(:,:,1);sol(:,:,2)];
    % XH: excluding IC?
    samps = [sol(2:end,:,1);sol(2:end,:,2)];
else                    % handle abnormal event (exponential growth/decay)
    tr = t(t>=te); tr = tr(:);
%    samps = [sol(1:end-1,:,1);abs(sole(1,:,1)).^(tr/te);
%             sol(1:end-1,:,2);abs(sole(1,:,2)).^(tr/te)];
    % XH: excluding IC?
    samps = [sol(2:end-1,:,1);abs(sole(1,:,1)).^(tr/te);
             sol(2:end-1,:,2);abs(sole(1,:,2)).^(tr/te)];
end
% mean of local max's and min's
minmax = fieldMinMax(samps);

% mean & std of bump-size distribution
threshold = 0.5; dx = mean(diff(x));
meanstd = sizeMeanStd(samps,threshold,dx,minmax);

qoi = [minmax;meanstd];
%keyboard